name: Build and Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - prod

env:
  EB_APP_NAME: "turtrack-server"
  EB_ENV_NAME: "Turtrack-server-env"
  JAR_NAME: "turtrack-server-0.0.1-SNAPSHOT.jar"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        env:
          SPRING_PROFILES_ACTIVE: prod
        run: |
          mvn clean package -DskipTests
          echo "Build completed successfully"
          ls -la target/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup SSL Configuration
        run: |
          mkdir -p .ebextensions
          echo "files:" > .ebextensions/https-instance.config
          echo "  /etc/pki/tls/certs/server.crt:" >> .ebextensions/https-instance.config
          echo "    mode: \"000400\"" >> .ebextensions/https-instance.config
          echo "    owner: root" >> .ebextensions/https-instance.config
          echo "    group: root" >> .ebextensions/https-instance.config
          echo "    content: |" >> .ebextensions/https-instance.config
          echo "${{ secrets.SSL_CERTIFICATE }}" | sed 's/^/      /' >> .ebextensions/https-instance.config
          echo "  /etc/pki/tls/certs/server.key:" >> .ebextensions/https-instance.config
          echo "    mode: \"000400\"" >> .ebextensions/https-instance.config
          echo "    owner: root" >> .ebextensions/https-instance.config
          echo "    group: root" >> .ebextensions/https-instance.config
          echo "    content: |" >> .ebextensions/https-instance.config
          echo "${{ secrets.SSL_PRIVATE_KEY }}" | sed 's/^/      /' >> .ebextensions/https-instance.config
          echo "container_commands:" >> .ebextensions/https-instance.config
          echo "  01restart_nginx:" >> .ebextensions/https-instance.config
          echo "    command: \"service nginx restart\"" >> .ebextensions/https-instance.config

      - name: Create nginx SSL config
        run: |
          mkdir -p .platform/nginx/conf.d
          cat > .platform/nginx/conf.d/ssl.conf << 'EOL'
          server {
              listen       443 ssl;
              server_name  ${{ vars.DOMAIN_NAME }};
          
              ssl_certificate      /etc/pki/tls/certs/server.crt;
              ssl_certificate_key  /etc/pki/tls/certs/server.key;
          
              ssl_session_timeout  5m;
              ssl_protocols  TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers   on;
          
              location / {
                  proxy_pass  http://127.0.0.1:9999;
                  proxy_set_header   Connection "";
                  proxy_http_version 1.1;
                  proxy_set_header   Host            $host;
                  proxy_set_header   X-Real-IP       $remote_addr;
                  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header   X-Forwarded-Proto https;
              }
          }
          EOL

      - name: Create nginx default config
        run: |
          mkdir -p .platform/nginx/conf.d/elasticbeanstalk/
          cat > .platform/nginx/conf.d/elasticbeanstalk/00_application.conf << 'EOL'
          location / {
              proxy_pass          http://127.0.0.1:9999;
              proxy_http_version  1.1;
              proxy_set_header    Connection          $connection_upgrade;
              proxy_set_header    Upgrade             $http_upgrade;
              proxy_set_header    Host                $host;
              proxy_set_header    X-Real-IP           $remote_addr;
              proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
          }
          EOL

      - name: Generate deployment package
        run: |
          mkdir -p deploy
          cp target/${{ env.JAR_NAME }} deploy/application.jar
          cp -r .ebextensions deploy/
          cp -r .platform deploy/
          cd deploy && zip ../deploy.zip -r * .[^.]* || true
          cd ..

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: "v-${{ github.sha }}"
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 300
          use_existing_version_if_available: false
          ignore_health_check: true